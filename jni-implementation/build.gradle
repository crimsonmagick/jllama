import static org.gradle.internal.os.OperatingSystem.current

plugins {
  id("dev.welbyseely.gradle-cmake-plugin") version "0.0.5"
  id("maven-publish")
}

final compiler = current().isWindows() ? compiler = getWindowsCompiler() : getUnixLikeCompiler()

if (!compiler || compiler == Compilers.NONE_FOUND) {
  final errorMessage = "No supported compilers found. Build cannot continue."
  logger.error errorMessage
  throw new GradleScriptException(errorMessage)
}

cmake {
  generator = compiler.generator
  sourceFolder = file("$projectDir/src")
  buildSharedLibs = true
  setDef(['BUILD_LLAMA_CPP'     : 'ON',
          'BUILD_SHARED_LIBS'   : 'ON',
          'LLAMA_BUILD_EXAMPLES': 'OFF'
  ])
  if (compiler.toolchain) {
    getDef()['CMAKE_TOOLCHAIN_FILE'] = projectDir as String + compiler.toolchain
  }
  buildConfig = 'Release'
  buildClean = true
}

static def getOSAndArch() {
  def os = current()
  def arch = System.getProperty('os.arch')
  return "${os.getFamilyName()}_${arch}"
}

publishing {
  publications {
    nativeLib(MavenPublication) {}
  }
  repositories {
    mavenLocal()
  }
}

task prepareDllForPublish {
  dependsOn build
  doLast {
    publishing.publications.nativeLib.artifact(file("$buildDir/cmake/main/cpp/Release/jni-implementation.dll")) {
      classifier = getOSAndArch()
    }
  }
}

tasks.withType(PublishToMavenLocal) {
  dependsOn prepareDllForPublish
}


def getWindowsCompiler() {
  try {
    def msvcOutput = 'cl'.execute().text
    if (msvcOutput.contains('Microsoft')) {
      return Compilers.MSVC
    }
  } catch (Exception ignored) {
    logger.info 'MSVC is not installed on Windows'
  }

  try {
    def mingwOutput = 'gcc --version'.execute().text
    if (mingwOutput.contains('MinGW')) {
      return Compilers.MINGW
    }
  } catch (Exception ignored) {
    logger.info 'MinGW is not installed on Windows'
  }
  return Compilers.NONE_FOUND
}

def getUnixLikeCompiler() {
  def compilers = ['gcc', 'clang']
  for (compiler in compilers) {
    try {
      def output = "${compiler} --version".execute().text
      if (output.contains(compiler)) {
        return Compilers.valueOf(compiler.toUpperCase())
      }
    } catch (Exception ignored) {
      logger.info("${compiler} is not installed on ${os}")
    }
  }
  return Compilers.NONE_FOUND
}