import org.gradle.internal.os.OperatingSystem

plugins {
  id("java")
  id("maven-publish")
  id("dev.welbyseely.gradle-cmake-plugin") version "0.1.0"
}

apply plugin: "dev.welbyseely.gradle-cmake-plugin"

if (project.hasProperty("RELEASE")) {
  cmake {
    sourceFolder = file("$projectDir/src")
    buildSharedLibs = true
    buildClean = true
    buildConfig = 'Release'
    targets {
      windowsX64 {
        final os = OperatingSystem.WINDOWS
        final toolChain = Toolchains.getToolchain(os, OperatingSystem.current(), Architectures.x64, Compilers.MINGW)
        generator = toolChain.generator
        workingFolder = new File(project.getBuildDir(), "cmake" + File.separator + os.nativePrefix)
        defs = ['BUILD_LLAMA_CPP'     : 'ON',
                'BUILD_SHARED_LIBS'   : 'ON',
                'LLAMA_BUILD_EXAMPLES': 'OFF',
                'CMAKE_TOOLCHAIN_FILE': projectDir as String + "/src/" + toolChain.file,
                *:toolChain.customDefs
        ]
      }
      linuxX64 {
        final os = OperatingSystem.LINUX
        final toolChain = Toolchains.getToolchain(os, OperatingSystem.current(), Architectures.x64, Compilers.GCC)
        generator = toolChain.generator
        workingFolder = new File(project.getBuildDir(), "cmake" + File.separator + os.nativePrefix)
        defs = ['BUILD_LLAMA_CPP'     : 'ON',
                'BUILD_SHARED_LIBS'   : 'ON',
                'LLAMA_BUILD_EXAMPLES': 'OFF',
                'CMAKE_TOOLCHAIN_FILE': projectDir as String + "/src/" + toolChain.file,
                *:toolChain.customDefs
        ]
      }
      macArm64 {
        final os = OperatingSystem.MAC_OS
        final toolChain = Toolchains.getToolchain(os, OperatingSystem.current(), Architectures.arm64, Compilers.CLANG)
        generator = toolChain.generator
        workingFolder = new File(project.getBuildDir(), "cmake" + File.separator + os.nativePrefix)
        defs = ['BUILD_LLAMA_CPP'     : 'ON',
                'BUILD_SHARED_LIBS'   : 'ON',
                'LLAMA_BUILD_EXAMPLES': 'OFF',
                'CMAKE_TOOLCHAIN_FILE': projectDir as String + "/src/" + toolChain.file,
                *:toolChain.customDefs
        ]
      }
    }
  }
} else {
  def os
  if (project.hasProperty("operatingSystem")) {
    os = OperatingSystem.forName(project.findProperty("operatingSystem") as String)
  } else {
    os = OperatingSystem.current()
  }

  def compiler
  if (project.hasProperty("compiler")) {
    compiler = Compilers.valueOf(project.findProperty("compiler") as String)
  } else {
    compiler = os == OperatingSystem.WINDOWS ? getWindowsCompiler() : getUnixLikeCompiler()
  }

  def arch
  if (project.hasProperty("arch")) {
    arch = Architectures.valueOf(project.findProperty("arch") as String)
  } else {
    arch = Architectures.getHostArch()
  }

  if (!compiler || compiler == Compilers.NONE_FOUND) {
    final errorMessage = "No supported compilers found. Build cannot continue."
    logger.error errorMessage
    throw new GradleScriptException(errorMessage, null)
  }

  final toolChain = Toolchains.getToolchain(os, OperatingSystem.current(), arch, compiler)

  if (!toolChain) {
    logger.warn "No toolchain found for architecture=${arch.name()}, " +
      "hostOs=${OperatingSystem.current().name}, operatingSystem=${os.name}, compiler=${compiler.name()}"
  }

  cmake {
    workingFolder = new File(project.getBuildDir(), "cmake" + File.separator + os.nativePrefix)
    generator = toolChain.generator
    sourceFolder = file("$projectDir/src")
    buildSharedLibs = true
    defs = ['BUILD_LLAMA_CPP'     : 'ON',
            'BUILD_SHARED_LIBS'   : 'ON',
            'LLAMA_BUILD_EXAMPLES': 'OFF',
            'CMAKE_TOOLCHAIN_FILE': projectDir as String + "/src/" + toolChain.file,
            *:toolChain.customDefs
    ]
    buildConfig = 'Release'
    buildClean = true
  }
}

build {
  dependsOn ':jni-bindings:compileJava'
}

// Get the cmake build directories
def cmakeBuildDirs = file("$projectDir/build/cmake").listFiles().findAll { it.isDirectory() }

// Iterate through each build directory
cmakeBuildDirs.each { dir ->
  def targetName = dir.name

  String jniImplLibJarConfigName = "jniImplLibJar${targetName.capitalize()}"
  String llamaLibJarConfigName = "llamaLibJar${targetName.capitalize()}"

  configurations {
    create(jniImplLibJarConfigName)
    create(llamaLibJarConfigName)
  }

  // Create a task name for the JNI implementation Jar
  String jniTaskName = "packageJniImplLibInJar${targetName.capitalize()}"
  tasks.register(jniTaskName, Jar) {
    dependsOn build
    from("$dir/jni-implementation/release/")
    include('*jni-implementation*')
    archiveBaseName.set("jni-implementation")
    archiveClassifier.set("${targetName}")
  }

  // Create a task name for the Llama library Jar
  String llamaTaskName = "packageLlamaLibInJar${targetName.capitalize()}"
  tasks.register(llamaTaskName, Jar) {
    dependsOn build
    from("$dir/llama/release/")
    include('*llama*')
    archiveBaseName.set("llama-cpp")
    archiveClassifier.set("${targetName}")
  }

  artifacts {
    add(jniImplLibJarConfigName, tasks.named(jniTaskName))
    add(llamaLibJarConfigName, tasks.named(llamaTaskName))
  }
}

task packageAllJars {
  cmakeBuildDirs.each { dir ->
    def targetName = dir.name
    String jniTaskName = "packageJniImplLibInJar${targetName.capitalize()}"
    String llamaTaskName = "packageLlamaLibInJar${targetName.capitalize()}"
    dependsOn tasks.named(jniTaskName)
    dependsOn tasks.named(llamaTaskName)
  }
}

publishing {
  publications {
    jniImplLib(MavenPublication) {
      cmakeBuildDirs.each { dir ->
       final targetName = dir.name
       final taskName = "packageJniImplLibInJar${targetName.capitalize()}"
       artifact tasks.named(taskName)
      }
      artifactId = 'jni-implementation'
    }
    llamaLib(MavenPublication) {
      cmakeBuildDirs.each { dir ->
        final targetName = dir.name
        String taskName = "packageLlamaLibInJar${targetName.capitalize()}"
        artifact tasks.named(taskName)
      }
      artifactId = 'llama-cpp'
    }
  }
  repositories {
    mavenLocal()
    maven {
      name = 'OSSRH'
      url = version.endsWith('SNAPSHOT') ?
        'https://s01.oss.sonatype.org/content/repositories/snapshots/' :
        'https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/'
      credentials {
        username = System.hasProperty("OSSRH_TOKEN_KEY") ? System.getProperty("OSSRH_TOKEN_KEY") : System.getenv("OSSRH_TOKEN_KEY")
        password = System.hasProperty("OSSHR_TOKEN_PASSWORD") ? System.getProperty("OSSRH_TOKEN_PASSWORD") : System.getenv("OSSRH_TOKEN_PASSWORD")
      }
    }
  }
}



static def getWindowsCompiler() {
  if (Compilers.MSVC.isPresent()) {
    return Compilers.MSVC
  } else if (Compilers.MINGW.isPresent()) {
    return Compilers.MINGW
  } else {
    return Compilers.NONE_FOUND
  }
}

static def getUnixLikeCompiler() {
  if (Compilers.GCC.isPresent()) {
    return Compilers.GCC
  } else if (Compilers.CLANG.isPresent()) {
    return Compilers.CLANG
  } else {
    return Compilers.NONE_FOUND
  }
}