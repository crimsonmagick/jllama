import org.gradle.internal.os.OperatingSystem

plugins {
  id("dev.welbyseely.gradle-cmake-plugin") version "0.0.5"
  id("java")
  id("maven-publish")
}

def os
if (project.hasProperty("operatingSystem")) {
  os = OperatingSystem.forName(project.findProperty("operatingSystem") as String)
} else {
  os = OperatingSystem.current()
}

def compiler
if (project.hasProperty("compiler")) {
  compiler = Compilers.valueOf(project.findProperty("compiler") as String)
} else {
  compiler = os == OperatingSystem.WINDOWS ? getWindowsCompiler() : getUnixLikeCompiler()
}

def arch
if (project.hasProperty("arch")) {
  arch = Architectures.valueOf(project.findProperty("arch") as String)
} else {
  arch = Architectures.getHostArch()
}

if (!compiler || compiler == Compilers.NONE_FOUND) {
  final errorMessage = "No supported compilers found. Build cannot continue."
  logger.error errorMessage
  throw new GradleScriptException(errorMessage, null)
}

final toolChain = Toolchains.getToolchain(os, OperatingSystem.current(), arch, compiler)
if (!toolChain) {
  logger.warn "No toolchain found for architecture=${arch.name()}, " +
    "hostOs=${OperatingSystem.current().name}, operatingSystem=${os.name}, compiler=${compiler.name()}"
}

cmake {
  generator = toolChain.generator
  sourceFolder = file("$projectDir/src")
  buildSharedLibs = true
  setDef(['BUILD_LLAMA_CPP'     : 'ON',
          'BUILD_SHARED_LIBS'   : 'ON',
          'LLAMA_BUILD_EXAMPLES': 'OFF',
          'CMAKE_TOOLCHAIN_FILE': projectDir as String + "/src/" + toolChain.file
  ])
  if (toolChain.customDefs && !toolChain.customDefs.isEmpty()) {
    toolChain.customDefs.entrySet()
      .forEach { entry ->
        getDef().put(entry.getKey(), entry.getValue())
      }
  }
  buildConfig = 'Release'
  buildClean = true
}

build {
  dependsOn ':jni-bindings:compileJava'
}

static def getOSAndArch(OperatingSystem os) {
  def arch = System.getProperty('os.arch')
  return "${os.getFamilyName()}_${arch}"
}

tasks.register('packageJniImplLibInJar', Jar) {
  dependsOn build
  from("$buildDir/cmake/jni-implementation/release/")
  include('*jni-implementation*')
  archiveBaseName.set("jni-implementation")
  archiveClassifier.set(getOSAndArch(os))
}

tasks.register('packageLlamaLibInJar', Jar) {
  dependsOn build
  from("$buildDir/cmake/llama/release/")
  include('*llama*')
  archiveBaseName.set("llama-cpp")
  archiveClassifier.set(getOSAndArch(os))
}

configurations {
  jniImplLibJar
  llamaLibJar
}

artifacts {
  jniImplLibJar tasks.packageJniImplLibInJar
  llamaLibJar tasks.packageLlamaLibInJar
}

publishing {
  publications {
    jniImplLib(MavenPublication) {
      artifact packageJniImplLibInJar
    }
    llamaLib(MavenPublication) {
      artifact packageLlamaLibInJar
      artifactId = 'llama-cpp'
    }
  }
  repositories {
    mavenLocal()
  }
}

static def getWindowsCompiler() {
  if (Compilers.MSVC.isPresent()) {
    return Compilers.MSVC
  } else if (Compilers.MINGW.isPresent()) {
    return Compilers.MINGW
  } else {
    return Compilers.NONE_FOUND
  }
}

static def getUnixLikeCompiler() {
  if (Compilers.GCC.isPresent()) {
    return Compilers.GCC
  } else if (Compilers.CLANG.isPresent()) {
    return Compilers.CLANG
  } else {
    return Compilers.NONE_FOUND
  }
}