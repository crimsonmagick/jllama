import static org.gradle.internal.os.OperatingSystem.current

plugins {
  id 'cpp-library'
}

model {
  platforms {
    create("windows_x64")
    create("linux_x64")
    create("macos_arm64")
  }
}

final javaHome = System.getProperty("java.home")
final includeDir
if (javaHome.endsWith("jre")) {
   includeDir = new File(javaHome, "../include")
} else {
  includeDir = new File(javaHome, "./include")
}


if (!includeDir.exists()) {
  throw new GradleException("Failed to locate the JDK include directory.")
}

def includeDirPath = includeDir.canonicalPath

library {
  binaries.configureEach {
    if (current().isWindows()) { {
      compileTask.get().compilerArgs.add('/std:c++latest')
      }
    } else {
        compileTask.get().compilerArgs.add('-std=c++20')
    }
  }
  source.from 'src/main/cpp', '../jni-bindings/build/generated/sources/headers/java/main'
  privateHeaders.from '../jni-bindings/build/generated/sources/headers/java/main',
    'src/external/llama.cpp', "$includeDirPath", "$includeDirPath/linux",
    "$includeDirPath/win32", "$includeDirPath/darwin"
}

tasks.withType(CppCompile) {
  dependsOn ':jni-bindings:compileJava'
}