import static org.gradle.internal.os.OperatingSystem.current

plugins {
  id("dev.welbyseely.gradle-cmake-plugin") version "0.0.5"
  id("maven-publish")
}

logger.warn "osName=${current().getName()}"
logger.warn "archName=" + System.getProperty("os.arch")

final operatingSystem = current().isWindows() ? CompilerOs.WINDOWS : current().isLinux() ? CompilerOs.LINUX : current().isMacOsX() ? CompilerOs.MACOS : CompilerOs.OTHER
final compiler = operatingSystem == CompilerOs.WINDOWS ? getWindowsCompiler() : getUnixLikeCompiler()
final arch = Architectures.getHostArch()

if (!compiler || compiler == Compilers.NONE_FOUND) {
  final errorMessage = "No supported compilers found. Build cannot continue."
  logger.error errorMessage
  throw new GradleScriptException(errorMessage, null)
}

final toolChain = Toolchains.getToolchain(operatingSystem, arch, compiler)
if (!toolChain) {
  logger.warn "No toolchain found for architecture=${arch.name()}, operatingSystem=${operatingSystem.name()}, compiler=${compiler.name()}"
}

cmake {
  generator = compiler.generator
  sourceFolder = file("$projectDir/src")
  buildSharedLibs = true
  setDef(['BUILD_LLAMA_CPP'     : 'ON',
          'BUILD_SHARED_LIBS'   : 'ON',
          'LLAMA_BUILD_EXAMPLES': 'OFF'
  ])
  if (toolChain) {
    getDef()['CMAKE_TOOLCHAIN_FILE'] = projectDir as String + "/src/" + toolChain
  }
  buildConfig = 'Release'
  buildClean = true
}

static def getOSAndArch() {
  def os = current()
  def arch = System.getProperty('os.arch')
  return "${os.getFamilyName()}_${arch}"
}

publishing {
  publications {
    nativeLib(MavenPublication) {}
  }
  repositories {
    mavenLocal()
  }
}

task prepareDllForPublish {
  dependsOn build
  doLast {
    publishing.publications.nativeLib.artifact(file("$buildDir/cmake/main/cpp/Release/jni-implementation.dll")) {
      classifier = getOSAndArch()
    }
  }
}

tasks.withType(PublishToMavenLocal) {
  dependsOn prepareDllForPublish
}

static def getWindowsCompiler() {
  if (Compilers.MSVC.isPresent()) {
    return Compilers.MSVC
  } else if (Compilers.MINGW.isPresent()) {
    return Compilers.MINGW
  } else {
    return Compilers.NONE_FOUND
  }
}

static def getUnixLikeCompiler() {
  if (Compilers.GCC.isPresent()) {
    return Compilers.GCC
  } else if (Compilers.CLANG.isPresent()) {
    return Compilers.CLANG
  } else {
    return Compilers.NONE_FOUND
  }
}