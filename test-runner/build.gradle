import static org.gradle.internal.os.OperatingSystem.current

plugins {
    id 'java'
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

repositories {
    mavenCentral()
    maven {
        name = 'OSSRH'
        url = 'https://s01.oss.sonatype.org/content/repositories/snapshots/'
    }
}

dependencies {
    // Comment below to use packaged JARS
    implementation project(path: ':jni-bindings')
    implementation project(path: ':jni-implementation', configuration: 'jniImplLibJar')
    implementation project(path: ':jni-implementation', configuration: 'llamaLibJar')
    // Uncomment below to test packaged JARs
//    implementation 'net.jllama:jni-bindings:0.0.1-SNAPSHOT'
    // Linux
//    implementation 'net.jllama:jni-implementation:0.0.1-SNAPSHOT:linux_x64'
//    implementation 'net.jllama:llama-cpp:0.0.1-SNAPSHOT:linux_x64'
    // Mac
//    implementation 'net.jllama:jni-implementation:0.0.1-SNAPSHOT:os_x_arm64'
//    implementation 'net.jllama:llama-cpp:0.0.1-SNAPSHOT:os_x_arm64'
    // Windows
//    implementation 'net.jllama:jni-implementation:0.0.1-SNAPSHOT:windows_x64'
//    implementation 'net.jllama:llama-cpp:0.0.1-SNAPSHOT:windows_x64'
    implementation 'org.apache.logging.log4j:log4j-core:2.20.0'
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.15.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.2'
}

test {
    useJUnitPlatform()
}


group 'net.jllama'
version '0.0.1-SNAPSHOT'

task runProgram(type: JavaExec) {
    description = 'Runs the main program'
    group = 'application'

    dependsOn ':test-runner:build'
    mainClass = 'net.jllama.llama.cpp.java.bindings.runner.Main'
    systemProperty "modelpath", System.getProperty("modelpath")
    systemProperty "loglevel", System.getProperty("loglevel")

    // Uncomment below for using custom builds of jni-implementation and llama-cpp

//    final bridgeRelativePath = '/jni-implementation/build/cmake-manual/jni-implementation/debug'
//    final bridgeAbsolutePath = parent.projectDir as String + bridgeRelativePath
//    systemProperty 'java.library.path', bridgeAbsolutePath
//
//    final llamaRelativePath = '/jni-implementation/build/cmake/llama/release'
//    final String llamaAbsolutePath = parent.projectDir as String + llamaRelativePath
//
//    final dllPath = current().isWindows() ? 'PATH' :
//            current().isMacOsX() ? 'DYLD_LIBRARY_PATH' : 'LD_LIBRARY_PATH'
//    final envVariableValue = System.getenv(dllPath) ? System.getenv(dllPath) : ''
//    environment dllPath, "${envVariableValue}${File.pathSeparator}${llamaAbsolutePath}"

    doFirst {
        classpath = files(sourceSets.main.runtimeClasspath)
    }
}
